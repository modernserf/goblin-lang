import [_File_ _Log_ _Vec_ _Option_] := "core"
import [_Parser_] := "parse"

let result_scores := [win: 6 draw: 3 lose: 0]
let shape_scores := [rock: 1 paper: 2 scissors: 3]
let rules := Vec{}
  , [a: [rock] b: [rock] c: [draw]]
  , [a: [rock] b: [paper] c: [lose]]
  , [a: [rock] b: [scissors] c: [win]]
  , [a: [paper] b: [rock] c: [win]]
  , [a: [paper] b: [paper] c: [draw]]
  , [a: [paper] b: [scissors] c: [lose]]
  , [a: [scissors] b: [rock] c: [lose]]
  , [a: [scissors] b: [paper] c: [win]]
  , [a: [scissors] b: [scissors] c: [draw]]

# this is fast enough, but would be nice if this were indexed
let query := [
  on {player: a opponent: b}
    rules{find: {: row}
      (row{a} = a) && (row{b} = b)
    }{some!}{c}
  on {opponent: b result: c}
    rules{find: {: row}
      (row{b} = b) && (row{c} = c)
    }{some!}{a}
]

let left_hand := Parser{try match: [{: ch}
  if ch = "A" then 
    Option{some: [rock]}
  else if ch = "B" then
    Option{some:[paper]}
  else if ch = "C" then
    Option{some:[scissors]}
  else
    Option{none}
  end
]}

let right_hand := Parser{try match: [{: ch}
  if ch = "X" then 
    Option{some: [rock]}
  else if ch = "Y" then
    Option{some:[paper]}
  else if ch = "Z" then
    Option{some:[scissors]}
  else
    Option{none}
  end
]}

let right_result := Parser{try match: [{: ch}
   if ch = "X" then 
      Option{some: [lose]}
    else if ch = "Y" then
      Option{some: [draw]}
    else if ch = "Z" then
      Option{some: [win]}
    else
      Option{none}
    end
]}

let space := Parser{token: " "}

let round_1 :=
  left_hand .>> space .>>. right_hand .>> Parser{newline} |>> [{:[0: opponent 1: player]}
    let result := query{player: player opponent: opponent}
    player{: shape_scores} + result{: result_scores}
  ]

let round_2 :=
  left_hand .>> space .>>. right_result .>> Parser{newline} |>> [{:[0: opponent 1: result]}
    let player := query{opponent: opponent result: result}
    player{: shape_scores} + result{: result_scores}
  ]


let input := File{read text sync: "./aoc-2022/day-2.input.txt"}
let part_1 := Parser{parse: input with: *round_1 |>> [into: 0 fold: [+]]}{ok!}
Log{: "part 1: " ++ part_1}
let part_2 := Parser{parse: input with: *round_2 |>> [into: 0 fold: [+]]}{ok!}
Log{: "part 2: " ++ part_2}