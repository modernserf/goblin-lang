import [_File_ _Control_ _Vec_ _Log_ _Assert_] := "core"
import [_Parser_] := "parse"
import [_BitSet_] := "bitset"

let Rucksack := [
  on {: vec}
    let len := vec{length}
    let half := len >> 1
    let left := vec{to: half}
    let right := vec{from: half}
    Rucksack{
      left:   left{into: BitSet{} fold: [add]}
      right: right{into: BitSet{} fold: [add]}  
    }

  on {_left_ _right_} [
    on {sum overlap}
      let overlap := left & right
      overlap{to Iter}{into: 0 fold: [+]}
    on {to BitSet}
      left | right
  ]
]

# lowercase: a-z -> 1-26
let lowercase := Parser{range: "a" through: "z"} 
  |>> [{: ch} ch{code at: 0} - "a"{code at: 0} + 1]
# uppercase: A-Z -> 27-52
let uppercase := Parser{range: "A" through: "Z"}
  |>> [{: ch} ch{code at: 0} - "A"{code at: 0} + 27]

let letter := uppercase | lowercase

let line := +letter .>> Parser{newline} |>> Rucksack

let line_group := line{map: [to BitSet]} 
  {with: [&] join: line{map: [to BitSet]}}
  {with: [&] join: line{map: [to BitSet]}}
  {map: [to Vec]}
  {map: [at: 0]}

let line_sum := *line |>> [map: [sum overlap]] |>> [sum]

let group_sum := *line_group |>> [sum]

let input := File{read text sync: "./aoc-2022/day-3.input.txt"}

Log{: "part 1: " ++ Parser{parse: input with: line_sum}{ok!}}
Log{: "part 2: " ++ Parser{parse: input with: group_sum}{ok!}}

