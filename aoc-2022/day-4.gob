import [_File_ _Log_ _String_ _Parser_] := "core"

let Range := [
  on {from: first through: last} [
    on {: do f}
      f{from: first through: last}
    on {superset of: other}
      other{:
        on {from: other_first through: other_last}
          (first <= other_first) && (last >= other_last)
      }
    on {has: value}
      (first <= value) && (last >= value)
    on {overlaps: other}
      other{has: first} || other{has: last}
  ]
]

let parse_range := Parser{integer} 
  .>> Parser{token: "-"} 
  .>>. Parser{integer} 
  |>> [{: [0: left 1: right]} Range{from: left through: right}]

let parse_range_pair := parse_range
  .>> Parser{token: ","}
  .>>. parse_range
  .>> Parser{token: String{newline}}

let part_1 := *parse_range_pair
  |>> [{: pairs}
    pairs{into: 0 fold: {: [0: left 1: right] into: count}
      if left{superset of: right} || right{superset of: left} then
        count + 1
      else
        count
      end
    }
  ]

let part_2 := *parse_range_pair
  |>> [{: pairs}
    pairs{into: 0 fold: {: [0: left 1: right] into: count}
      if left{overlaps: right} || right{overlaps: left} then
        count + 1
      else
        count
      end
    }
  ]


let input := File{read text sync: "./aoc-2022/day-4.input.txt"}
Log{: "part 1: " ++ Parser{parse: input with: part_1}{some!}{to String}}
Log{: "part 2: " ++ Parser{parse: input with: part_2}{some!}{to String}}
