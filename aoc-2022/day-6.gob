import [_Vec_ _File_ _Log_ _Control_ _true_ _false_ _Assert_ _HashMap_] := "core"


let BitSet := [
  on {}
    BitSet{hi: 0 lo: 0}
  on {: vec}
    var bitset := BitSet{}
    vec{map: {: item}
      set bitset{add: item}
    }
    bitset

  on {_hi_ _lo_} [
    on {hi} hi
    on {lo} lo

    on {add: num}
      if num >= 32 then
        # TODO: fix `let x := x + 1`
        let hi' := hi | (1 << (num - 32))
        BitSet{hi: hi' _lo_}
      else
        let lo' := lo | (1 << num)
        BitSet{_hi_ lo: lo'}
      end
    
    on {has: num}
      if num >= 32 then
        hi & (1 << (num - 32)) != 0
      else
        lo & (1 << num) != 0
      end

    on {&: other}
      BitSet{
        hi: hi & other{hi}
        lo: lo & other{lo}
      }

    on {|: other}
      BitSet{
        hi: hi | other{hi}
        lo: lo | other{lo}
      }

    on {to Vec}
      var out := Vec{}
      Control{times: 64 do: {: i}
        if self{has: i} then
          set out{push: i}
        end
      }
      out

    on {size}
      hi{popcount} + lo{popcount}
  ]
]

let find_unique_substring := [{: input size: size}
  let a_code := "a"{code at: 0}
  Control{times: input{length} - size + 1 do: {: i}
    var bitset := BitSet{}
    Control{times: size do: {: j}
      let code := input{at: i + j}{code at: 0} - a_code
      set bitset{add: code}
    }
    if bitset{size} = size then return i + size end
  }
  return -1
]


let input := File{read text sync: "./aoc-2022/day-6.input.txt"}
Log{:"Part 1: " ++ find_unique_substring{: input size: 4}}
Log{:"Part 2: " ++ find_unique_substring{: input size: 14}}