import [_Assert_ _true_ _false_] := "core"

# bools

# equality
Assert{true: true = true}
Assert{false: true = false}
Assert{false: true = 1}
Assert{false: true{=: {: x} x}}

# operators
Assert{true: !false}
Assert{false: !true}
Assert{true: true && true}
Assert{false: true && false}
Assert{true: true || false}
Assert{false: false || false}

# strings
let str := "Hello, world!"
Assert{
  received: str 
  expected: "Hello, world!"
}

Assert{true: "Hello" = "Hello"}
Assert{false: "Hello" = "Goodbye"}
Assert{false: "Hello" = 1}

Assert{
  received: "Hello" ++ ", " ++ "world!"
  expected: "Hello, world!"
}

# integers
Assert{received: 1 + 1    expected: 2}
let n := 1
Assert{received: -n       expected: -1}
Assert{received: 2 - 3    expected: -1}
Assert{received: 2 * 5    expected: 10}
let n := -1
Assert{received: n{abs}   expected: 1}

# floats
Assert{received: 1.0 + 1.0  expected: 2.0}
Assert{received: 0.2 - 0.1  expected: 0.1}
Assert{received: 0.5 * 0.5  expected: 0.25}

let n := 1.0
Assert{received: -n         expected: -1.0}
Assert{received: n{abs}     expected: 1.0}

# int->float conversion
Assert{received: 1 + 1.0  expected: 2.0}
Assert{received: 1.0 + 1  expected: 2.0}

# strict equality
Assert{true: 1 = 1}
Assert{true: 1.0 = 1.0}
Assert{false: 1 = 2}
Assert{false: 1.0 = 2.0}
# does not convert int->flaot
Assert{false: 1 = 1.0}
Assert{false: 1.0 = 1}

# comparisons (with conversions)
Assert{true: 1 == 1}
Assert{true: 1 == 1.0}
Assert{true: 1.0 == 1}
Assert{true: 3 >= 1}
Assert{true: 3 >= 1.0}
Assert{true: 3.0 >= 1}
