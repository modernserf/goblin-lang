import [_true_ _false_ _Assert_] := "native"
import [_Control_] := "core/control"

let result := [{}
  var count := 0
  Control{loop: {}
    if count = 10 then return count end
    set count{+: 1}
  }
]{}
Assert{: result = 10}

var sum := 0
Control{times: 3 do: {: i}
  set sum{+: i}
}
Assert{: sum = 3}

var sum := 0
var should_continue := true
Control{:
  on {while} should_continue
  on {do} 
    set sum{+: 1}
    if sum = 5 then
      set should_continue := false
    end
}
Assert{: sum = 5}

import [_Option_] := "core/option"
var should_continue := Option{some: 1}
Control{:
  on {while} should_continue
  on {do: value} 
    set should_continue{map: [+: 1]}
    if value = 5 then
      set should_continue := Option{none}
    end
}
Assert{: should_continue = Option{none}}
