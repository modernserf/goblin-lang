import [_Option_] := "core/option"
import [_Control_] := "core/control"
import [_Vec_] := "core/vec"

let HM := [
  on {empty}
    HM{entry: [empty] children: Option{none}}
  on {init children}
    var cs := Vec{}
    Control{times: 32 do: {}
      set cs{push: HM{empty}}
    }
    cs

  on {entry: entry children: children} [
    on {key: k hash: hash}
      entry{:
        on {empty} ()
        on {key: key value: value}
          if key = k then
            return Option{some: value}
          end
      }
      children{:
        on {some: children}
          let next := children{at: hash & 31}
          return next{key: k hash: hash >> 5}
        on {none}
          return Option{none}
      }

    on {entry: e hash: hash}
      entry{:
        on {empty}
          return HM{entry: e children: children}
        on {key: key value: value}
          if e{key} = key then
            return HM{entry: e children: children}
          end  
      }
      let cs := children{:
        on {none} HM{init children}
        on {some: cs} cs
      }
      let next := cs{at: hash & 31}
      let inserted := next{entry: e hash: hash >> 5}
      let next_cs := cs{at: hash & 31 value: inserted}
      HM{entry: entry children: Option{some: next_cs}}

    on {remove: k hash: hash}
      entry{:
        on {empty} ()
        on {key: key value: __}
          if k = key then
            return HM{entry: [empty] children: children}
          end
      }
      let cs := children{:
        on {none}
          return self
        on {some: cs}
          cs
      }
      let next := cs{at: hash & 31}
      let removed := next{remove: k hash: hash >> 5}
      let next_cs := cs{at: hash & 31 value: removed}
      HM{entry: entry children: Option{some: next_cs}}

    on {size}
      let this_node := entry{:
        on {empty} 0
        else 1
      }
      children{:
        on {none} this_node
        on {some: cs}
          cs{into: this_node fold: {: item into: sum}
            item{size} + sum
          }
      }
    on {to Iter}
      import [_Iter_] := "core/iter"
      var iter := Iter{}
      entry{:
        on {empty} ()
        on {key: k value: v}
          set iter{push: [key: k value: v]}
      }
      children{:
        on {none} ()
        on {some: cs}
          cs{each: {: child}
            set iter{append: child{to Iter}}
          }
      }
      iter
  ]
]

export let HashMap := [
  on {}
    HashMap{state: HM{empty}}
  on {state: state} [
    on {key: k}
      state{key: k hash: k{hash}}
    on {key: k value: v}
      let next_state := state{entry: [key: k value: v] hash: k{hash}}
      HashMap{state: next_state}
    on {key: k value: inserted or update: do f}
      let next := self{key: k}{:
        on {some: value} f{: value}
        on {none} inserted
      }
      self{key: k value: next}
    on {remove: k}
      let next_state := state{remove: k hash: k{hash}}
      HashMap{state: next_state}
    on {size}
      state{size}
    on {to Iter}
      state{to Iter}
  ]
]

export let HashSet := [
  on {}
    HashSet{state: HM{empty}}
  on {state: state} [
    on {has: k}
      state{key: k hash: k{hash}}{is some}
    on {add: k}
      let next_state := state{entry: [key: k value: ()] hash: k{hash}}
      HashSet{state: next_state}
    on {remove: k}
      let next_state := state{remove: k hash: k{hash}}
      HashSet{state: next_state}
    on {size}
      state{size}
  ]
]