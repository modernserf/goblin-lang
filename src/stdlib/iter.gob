import [_true_ _false_ _Panic_] := "native"
import [_Option_] := "core/option"
import [_Control_] := "core/control"

export let Iter := [
  # empty iter
  on {} Iter{:[
    on {next}
      [done]
  ]}
  # repeats the same item, used as applicative base
  on {value: value} Iter{:[
    on {next}
      [value: value next: Iter{value: value}]
  ]}
  on {: iterable} [
    on {next}
      iterable{next}
    # eager handlers: produce a result, run immediately, can take do blocks
    on {each: do f}
      var state := iterable
      Control{loop: {}
        state{next}{:
          on {value: value next: next} 
            f{:value}
            set state := next
          on {done} return self
        }
      }
    on {into: init_state fold: do f}
      var state := init_state
      self{each: {: value}
        set state := f{: value into: state}
      }
      state
    on {fold: do f}
      iterable{next}{:
        on {done}
          Panic{: "cannot fold empty iterator"}
        on {value: value next: next}
          next{into: value fold: f}
      }

    on {to Slice}
      import [_Slice_] := "core/slice"
      self{into: Slice{} fold: [push]}
    on {first}
      self{nth: 0}
    on {last}
      var last := Option{none}
      self{each: {: value} 
        set last := Option{some: value}
      }
      last
    on {count}
      var count := 0
      self{each: {: __} 
        set count{+: 1}
      }
      count
    on {nth: start_index}
      var index := 0
      self{each: {: value}
        if index = start_index then return Option{some: value} end
        set index{+: 1}
      }
      return Option{none}
    on {any: do f}
      self{each: {: value}
        if f{: value} then return true end
      }
      return false
    on {every: do f}
      self{each: {: value}
        if !f{: value} then return false end
      }
      return true
    on {find: do f}
      self{each: {: value}
        if f{: value} then return Option{some: value} end
      }
      return Option{none}
    on {find index: do f}
      self{enumerate}{each: {: [index: i value: v]}
        if f{: v} then return Option{some: i} end
      }
      return Option{none}
    # lazy handlers: produce an iterator
    on {map: f} Iter{:[
      on {next} iterable{next}{:
        on {value: value next: next}
          [value: f{: value} next: next{map: f}]
        on {done}
          [done]
      }
    ]}
    on {filter: f} Iter{:[
      on {next}
        var current := iterable
        Control{loop: {}
          current{next}{:
            on {value: value next: next}
              if f{: value} then
                return [value: value next: next{filter: f}]
              else
                set current := next
              end
            on {done}
              return [done]
          }
        }
    ]}
    on {filter map: f} Iter{:[
      on {next} 
        var current := iterable
        Control{loop: {}
          current{next}{:
            on {value: value next: next}
              f{: value}{:
                on {some: result}
                  return [value: result next: next{filter map: f}]
                on {none}
                  set current := next
              }
            on {done}
              return [done]
          }
        }
    ]}
    on {,: item} {push: item} Iter{:[
      on {next}
        iterable{next}{:
          on {value: value next: next}
            [value: value next: next{push: item}]
          on {done}
            [value: item next: Iter{}]
        }
    ]}
    on {++: other} {append: other} Iter{:[
      on {next}
        iterable{next}{:
          on {value: value next: next}
            [value: value next: next{append: other}]
          on {done}
            other{next}
        }
    ]}
    on {chain: f} Iter{:[
      on {next}
        iterable{next}{:
          on {value: value next: next}
            f{: value}{append: next{chain: f}}{next}
          on {done}
            [done]
        }
    ]}
    on {cycle} Iter{:[
      on {next}
        iterable{next}{:
          on {value: value next: next}
            [value: value next: next{cycle: Iter{: iterable}}]
          # if iterator is initially empty, do not begin cycle
          on {done}
            [done]
        }
    ]}
    on {cycle: state} Iter{:[
      on {next}
        iterable{next}{:
          on {value: value next: next}
            [value: value next: next{cycle: state}]
          on {done}
            state{cycle}{next}
        }
    ]}
    on {with: f join: other} Iter{:[
      on {next}
        iterable{next}{:
          on {done} [done]
          on {value: v0 next: n0}
            other{next}{:
              on {done} [done]
              on {value: v1 next: n1}
                [value: f{: v1 into: v0} next: n0{with: f join: n1}]
            }
        }
    ]}
    on {pair: other} Iter{:[
      on {next}
        iterable{next}{:
          on {done}
            other{next}{:
              on {done} [done]
              on {value: right next: next_right}
                [value: [right: right] next: Iter{}{pair: next_right}]
            }
          on {value: left next: next_left}
            other{next}{:
              on {done} 
                [value: [left: left] next: next_left{pair: Iter{}}]
              on {value: right next: next_right}
                [value: [left: left right: right] next: next_left{pair: next_right}]
            }
        }
    ]}

    on {into: state scan: f} Iter{:[
      on {next}
        iterable{next}{:
          on {value: value next: next}
            let next_state := f{: value into: state}
            [value: next_state next: next{into: next_state scan: f}]
          on {done}
            [done]
        }
    ]}
    on {enumerate}
      self{enumerate from: 0}
    on {enumerate from: idx} Iter{:[
      on {next}
        iterable{next}{:
          on {value: value next: next}
            [value: [index: idx value: value] next: next{enumerate from: idx + 1}]
          on {done}
            [done]
        }
    ]}

    on {take while: f} Iter{:[
      on {next}
        iterable{next}{:
          on {value: value next: next}
            if f{:value} then [value: value next: next]
            else [done] end
          on {done}[done]
        }
    ]}
    on {drop while: f} Iter{:[
      on {next}
        var current := iterable
        Control{loop: {}
          current{next}{:
            on {value: value next: next}
              if !f{:value} then return [value: value next: next] end
              set current := next 
            on {done}
              return [done]
          }
        }
    ]}
    on {take: count} Iter{:[
      on {next}
        if count = 0 then return [done] end
        iterable{next}{:
          on {value: value next: next}
            [value: value next: next{take: count - 1}]
          on {done}
            [done]
        }
    ]}
    on {drop: count} Iter{:[
      on {next}
        var current := iterable
        Control{times: count do: {}
          current{next}{:
            on {value: __ next: next}
              set current := next
            on {done}
              return [done]
          }
        }
        return current{next}
    ]}
  ]
]