import [_Assert_] := "core"
import [_Slice_] := "core/slice" 

let slice := Slice{}, 1, 2, 3
Assert{: slice{length} = 3}
Assert{: slice{at: 0} = 1}
Assert{: slice{at: 2} = 3}
Assert{: slice{at: -1} = 3}

var longer := slice, 4, 5
Assert{: longer{length} = 5}
set longer{at: 1 value: "foo"}
Assert{: longer{at: 1} = "foo"}
Assert{: slice{at: 1} = 2}

let longer := Slice{}, 1, 2, 3, 4, 5
Assert{: longer{from: 2} = (Slice{}, 3, 4, 5)}
Assert{: longer{to: -1} = (Slice{}, 1, 2, 3, 4)}
Assert{: longer{from: 1 to: 3} = (Slice{}, 2, 3)}

var concat := (Slice{}, 1, 2, 3) ++ (Slice{}, 4, 5)
Assert{: concat{length} = 5}

let pair := slice{:{_first_ _rest_} [_first_ _rest_]}
Assert{: pair = slice{shift}{some!}}
Assert{: pair{first} = 1}
Assert{: pair{rest} = (Slice{}, 2, 3)}

let pair := slice{:{_most_ _last_} [_most_ _last_]}
Assert{: pair = slice{pop}{some!}}
Assert{: pair{most} = (Slice{}, 1, 2)}
Assert{: pair{last} = 3}
Slice{}{: {empty} ()}

let unsorted := Slice{}, 4, 1, 3, 2
Assert{: unsorted{sort} = (Slice{}, 1, 2, 3, 4)}
Assert{: unsorted = (Slice{}, 4, 1, 3, 2)}

Assert{: slice{map: [*: 2]} = (Slice{}, 2, 4, 6)}
Assert{: slice{filter: [<: 2]} = (Slice{}, 1)}
Assert{: slice{into: 0 fold: [+]} = 6}
