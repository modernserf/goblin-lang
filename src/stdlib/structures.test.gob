import [_Assert_ _Array_ _Cell_ _Vec_ _Option_ _HashMap_ _BitSet_] := "core"

# cell
let a := Cell{: 0}
let b := a
a{: 1}

Assert{
  received: b{}
  expected: 1
}

# arrays
let xs := Array{}
xs{push: 1}{push: 2}{push: 3}

Assert{
  received: xs{at: 1}
  expected: 2
}

xs{at: 1 value: 6}
Assert{
  received: xs{at: 1}
  expected: 6
}
Assert{
  received: xs{pop}
  expected: 3
}
Assert{
  received: xs{length}
  expected: 2
}
let ys := xs{copy}
xs{pop}
Assert{
  received: xs{length} + 1
  expected: ys{length}
}

let base := Array{}, 1, 2, 3
let slice := base{from: 1 to: 3}
Assert{received: slice{length} expected: 2}
Assert{received: slice{at: 0} expected: 2}


# vec

let xs := Vec{}, 1, 2, 3

let ys := xs, 4, 5
Assert{received: xs{length} expected: 3}
Assert{received: ys{length} expected: 5}

let mapped := xs{map:[+: 10]}
Assert{
  received: mapped
  expected: Vec{}, 11, 12, 13
}

let filtered := ys{filter: {:x} x & 1 = 0}
Assert{
  received: filtered
  expected: Vec{}, 2, 4
}

let unsorted := Vec{}, 2, 4, 1, -5, -3
Assert{
  received: unsorted{sort}
  expected: Vec{}, -5, -3, 1, 2, 4
}
Assert{
  received: unsorted{sort: [desc]}
  expected: Vec{}, 4, 2, 1, -3, -5
}

let unsorted := Vec{}, "hello", "", "greetings", "hi"
Assert{
  received: unsorted{sort by key: [length]}
  expected: Vec{}, "", "hi", "hello", "greetings"
}
Assert{
  received: unsorted{sort: [desc] by key: [length]}
  expected: Vec{}, "greetings", "hello", "hi", ""
}

var xs := Vec{}, 1, 2, 3
Assert{received: Vec{pop: var xs} expected: 3}
Assert{received: Vec{pop: var xs} expected: 2}
Assert{: xs = (Vec{}, 1)}

var xs := Vec{}, "a", "b", "c", "d", "e"
Assert{received: xs{from: 0 to: 3} expected: Vec{}, "a", "b", "c"}

let map := HashMap{}
  {key: "foo" value: 1}
  {key: "bar" value: 2}
  {key: "baz" value: 3}

Assert{received: map{size} expected: 3}
Assert{received: map{key: "quux"} expected: Option{none}}
Assert{received: map{key: "foo"} expected: Option{some: 1}}
Assert{received: map{key: "bar"} expected: Option{some: 2}}
Assert{received: map{key: "baz"} expected: Option{some: 3}}

let map := map{key: "bar" value: 5}
Assert{received: map{size} expected: 3}
Assert{received: map{key: "bar"} expected: Option{some: 5}}

let map := map{remove: "foo"}
Assert{received: map{size} expected: 2}
Assert{received: map{key: "foo"} expected: Option{none}}

var bs := BitSet{}
set bs{add: 1}
set bs{add: 30}
set bs{add: 58}
Assert{:bs{has: 1}}
Assert{:bs{has: 30}}
Assert{:bs{has: 58}}
Assert{false: bs{has: 20}}
Assert{false: bs{has: 63}}

let cs := (Vec{}, 4, 30, 22){into: BitSet{} fold: [add]}
Assert{:cs{has: 4}}
Assert{:cs{has: 30}}
Assert{:cs{has: 22}}

let intersect := bs & cs
Assert{: intersect{has: 30}}
Assert{false: intersect{has: 1}}
Assert{false: intersect{has: 4}}

Assert{
  expected: bs{to Vec}
  received: Vec{}, 1, 30, 58
}
