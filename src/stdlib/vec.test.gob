import [_Assert_ _Option_] := "core"
import [_Vec_] := "core/vec"

let xs := Vec{}, 1, 2, 3

let ys := xs, 4, 5
Assert{received: xs{length} expected: 3}
Assert{received: ys{length} expected: 5}

let mapped := xs{map:[+: 10]}
Assert{
  received: mapped
  expected: Vec{}, 11, 12, 13
}

let filtered := ys{filter: {:x} x & 1 = 0}
Assert{
  received: filtered
  expected: Vec{}, 2, 4
}

let unsorted := Vec{}, 2, 4, 1, -5, -3
Assert{
  received: unsorted{sort}
  expected: Vec{}, -5, -3, 1, 2, 4
}
Assert{
  received: unsorted{sort: [desc]}
  expected: Vec{}, 4, 2, 1, -3, -5
}

let unsorted := Vec{}, "hello", "", "greetings", "hi"
Assert{
  received: unsorted{sort by key: [length]}
  expected: Vec{}, "", "hi", "hello", "greetings"
}
Assert{
  received: unsorted{sort: [desc] by key: [length]}
  expected: Vec{}, "greetings", "hello", "hi", ""
}

var xs := Vec{}, 1, 2, 3
Assert{received: Vec{pop: var xs} expected: 3}
Assert{received: Vec{pop: var xs} expected: 2}
Assert{: xs = (Vec{}, 1)}

var xs := Vec{}, "a", "b", "c", "d", "e"
Assert{received: xs{from: 0 to: 3} expected: Vec{}, "a", "b", "c"}

let xs := Vec{}, 1, 2, 3
Assert{received: xs{to Iter}{to Vec} expected: xs}